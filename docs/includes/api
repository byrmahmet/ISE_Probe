<h1 id="class-members">Class Members</h1>

<h3 id="public-float-tempc"><code class="prettyprint">public float tempC</code></h3>

<p>Temperature in C</p>

<h3 id="public-float-tempf"><code class="prettyprint">public float tempF</code></h3>

<p>Temperature in F</p>

<h3 id="public-long-mv"><code class="prettyprint">public  long mV</code></h3>

<p>Milli-volts from pH probe</p>

<h1 id="class-functions">Class Functions</h1>

<h2 id="float-measuremv"><code class="prettyprint">float measuremV()</code></h2>

<p>Starts a mV measurement.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">ISE_Probe</span><span class="o">::</span><span class="n">measuremV</span><span class="p">();</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">ISE</span><span class="o">.</span><span class="n">measuremV</span><span class="p">()</span>
</code></pre><pre class="highlight shell tab-shell"><code>mv
</code></pre>
<h3 id="returns">Returns</h3>

<p>the measured result in mV</p>

<h2 id="float-measuretemp"><code class="prettyprint">float measureTemp()</code></h2>

<p>Starts a temperature measurement.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">ISE_Probe</span><span class="o">::</span><span class="n">measureTemp</span><span class="p">();</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">ISE</span><span class="o">.</span><span class="n">measureTemp</span><span class="p">()</span>
</code></pre><pre class="highlight shell tab-shell"><code>temp
</code></pre>
<p>tempC and tempF are updated</p>

<p>A value of -127 means the device is not connected.</p>

<h3 id="returns">Returns</h3>

<p>temperature in C</p>

<h2 id="void-calibratesingle-float-solutionmv"><code class="prettyprint">void calibrateSingle(float solutionmV)</code></h2>

<p>Calibrates the probe using a single point using a mV value.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">ISE_Probe</span><span class="o">::</span><span class="n">calibrateSingle</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">ISE</span><span class="o">.</span><span class="n">calibrateSingle</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</code></pre><pre class="highlight shell tab-shell"><code>cal 200
</code></pre>
<p>The result will be saved in the device&rsquo;s EEPROM and used automatically.</p>

<h2 id="void-calibrateprobelow-float-solutionmv"><code class="prettyprint">void calibrateProbeLow(float solutionmV)</code></h2>

<p>Calibrates the dual-point values for the low reading, in mV, and saves them in the devices&rsquo;s EEPROM.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">ISE_Probe</span><span class="o">::</span><span class="n">calibrateProbeLow</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">ISE</span><span class="o">.</span><span class="n">calibrateProbeLow</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre><pre class="highlight shell tab-shell"><code>low 0
</code></pre>
<h3 id="parameters">Parameters</h3>

<ul>
<li><code class="prettyprint">solutionmV</code> the mV of the calibration solution</li>
</ul>

<h2 id="void-calibrateprobehigh-float-solutionmv"><code class="prettyprint">void calibrateProbeHigh(float solutionmV)</code></h2>

<p>Calibrates the dual-point values for the high reading, in mV, and saves them in the devices&rsquo;s EEPROM.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">ISE_Probe</span><span class="o">::</span><span class="n">calibrateProbeHigh</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">ISE</span><span class="o">.</span><span class="n">calibrateProbeHigh</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</code></pre><pre class="highlight shell tab-shell"><code>high 200
</code></pre>
<h3 id="parameters">Parameters</h3>

<ul>
<li><code class="prettyprint">solutionmV</code> the mV of the calibration solution</li>
</ul>

<h2 id="void-setdualpointcalibration-float-reflow-float-refhigh-float-readlow-float-readhigh"><code class="prettyprint">void setDualPointCalibration(float refLow,float refHigh,float readLow,float readHigh)</code></h2>

<p>Sets all the values, in mV, for dual point calibration and saves them in the devices&rsquo;s EEPROM.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">ISE_Probe</span><span class="o">::</span><span class="n">setDualPointCalibration</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">230</span><span class="p">);</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">ISE</span><span class="o">.</span><span class="n">setDualPointCalibration</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">230</span><span class="p">)</span>
</code></pre>
<h3 id="parameters">Parameters</h3>

<ul>
<li><p><code class="prettyprint">refLow</code> the reference low point</p></li>
<li><p><code class="prettyprint">refHigh</code> the reference high point</p></li>
<li><p><code class="prettyprint">readLow</code> the measured low point</p></li>
<li><p><code class="prettyprint">readHigh</code> the measured high point</p></li>
</ul>

<h2 id="float-getcalibrateoffset"><code class="prettyprint">float getCalibrateOffset()</code></h2>

<p>Retrieves the single-point offset from the device.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">float</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">ISE_Probe</span><span class="o">::</span><span class="n">getCalibrateOffset</span><span class="p">();</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">offset</span> <span class="o">=</span> <span class="n">ISE</span><span class="o">.</span><span class="n">getCalibrateOffset</span><span class="p">()</span>
</code></pre><pre class="highlight shell tab-shell"><code>cal
</code></pre>
<h3 id="returns">Returns</h3>

<p>the probe&rsquo;s offset</p>

<h2 id="void-usetemperaturecompensation-bool-b"><code class="prettyprint">void useTemperatureCompensation(bool b)</code></h2>

<p>Configures the device to use temperature compensation or not.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">ISE_Probe</span><span class="o">::</span><span class="n">useTemperatureCompensation</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">ISE</span><span class="o">.</span><span class="n">useTemperatureCompensation</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</code></pre><pre class="highlight shell tab-shell"><code>tc 1
</code></pre>
<h3 id="parameters">Parameters</h3>

<ul>
<li><code class="prettyprint">b</code> true for false</li>
</ul>

<h2 id="bool-usingtemperaturecompensation"><code class="prettyprint">bool usingTemperatureCompensation()</code></h2>

<p>Determines if temperature compensation is being used.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">bool</span> <span class="n">usingTemp</span> <span class="o">=</span> <span class="n">ISE_Probe</span><span class="o">::</span><span class="n">usingTemperatureCompensation</span><span class="p">();</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">usingTemp</span> <span class="o">=</span> <span class="n">ISE</span><span class="o">.</span><span class="n">usingTemperatureCompensation</span><span class="p">()</span>
</code></pre><pre class="highlight shell tab-shell"><code>tc
</code></pre>
<h3 id="returns">Returns</h3>

<p>true if using compensation, false otherwise</p>

<h2 id="void-usedualpoint-bool-b"><code class="prettyprint">void useDualPoint(bool b)</code></h2>

<p>Configures device to use dual-point calibration.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">ISE_Probe</span><span class="o">::</span><span class="n">useDualPoint</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">ISE</span><span class="o">.</span><span class="n">useDualPoint</span><span class="p">(</span><span class="bp">True</span><span class="p">);</span>
<span class="sb">``</span><span class="err">`</span><span class="n">shell</span>
<span class="n">dp</span> <span class="mi">1</span>
</code></pre>
<h3 id="parameters">Parameters</h3>

<ul>
<li><code class="prettyprint">b</code> true or false</li>
</ul>

<h2 id="bool-usingdualpoint"><code class="prettyprint">bool usingDualPoint()</code></h2>

<p>Determines if dual point calibration is being used.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">bool</span> <span class="n">usingTemp</span> <span class="o">=</span> <span class="n">ISE_Probe</span><span class="o">::</span><span class="n">usingDualPoint</span><span class="p">();</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">usingTemp</span> <span class="o">=</span> <span class="n">ISE</span><span class="o">.</span><span class="n">usingDualPoint</span><span class="p">()</span>
</code></pre><pre class="highlight shell tab-shell"><code>dp
</code></pre>
<h3 id="returns">Returns</h3>

<p>true if using compensation, false otherwise</p>

<h2 id="float-getcalibratehighreference"><code class="prettyprint">float getCalibrateHighReference()</code></h2>

<p>Retrieves the dual-point calibration high reference value.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">float</span> <span class="n">calHigh</span> <span class="o">=</span> <span class="n">ISE_Probe</span><span class="o">::</span><span class="n">getCalibrateHighReference</span><span class="p">();</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">calHigh</span> <span class="o">=</span> <span class="n">ISE</span><span class="o">.</span><span class="n">getCalibrateHighReference</span><span class="p">()</span>
</code></pre><pre class="highlight shell tab-shell"><code>high
</code></pre>
<h3 id="returns">Returns</h3>

<p>the dual-point calibration high reference value</p>

<h2 id="float-getcalibratelowreference"><code class="prettyprint">float getCalibrateLowReference()</code></h2>

<p>Retrieves the dual-point calibration low reference value.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">float</span> <span class="n">calLow</span> <span class="o">=</span> <span class="n">ISE_Probe</span><span class="o">::</span><span class="n">getCalibrateLowReference</span><span class="p">();</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">calLow</span> <span class="o">=</span> <span class="n">ISE</span><span class="o">.</span><span class="n">getCalibrateLowReference</span><span class="p">()</span>
</code></pre><pre class="highlight cpp tab-cpp"><code><span class="n">low</span>
</code></pre>
<h3 id="returns">Returns</h3>

<p>the dual-point calibration low reference value</p>

<h2 id="uint8_t-getversion"><code class="prettyprint">uint8_t getVersion()</code></h2>

<p>Retrieves the firmware version of the device.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">uint8_t</span> <span class="n">version</span> <span class="o">=</span> <span class="n">ISE_Probe</span><span class="o">::</span><span class="n">getVersion</span><span class="p">();</span>
</code></pre><pre class="highlight python tab-python"><code><span class="n">version</span> <span class="o">=</span> <span class="n">ISE</span><span class="o">.</span><span class="n">getVersion</span><span class="p">()</span>
</code></pre><pre class="highlight shell tab-shell"><code>version
</code></pre>
<h3 id="returns">Returns</h3>

<p>version of firmware</p>

<h2 id="void-reset"><code class="prettyprint">void reset()</code></h2>

<p>Resets all the stored calibration information.</p>
